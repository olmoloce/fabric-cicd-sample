name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
      inputs:
        azure-client-id:
          description: "Azure Client ID"
          required: true
        azure-tenant-id:
          description: "Azure Tenant ID"
          required: true
        azure-subscription-id:
          description: "Azure Subscription ID"
          required: true
        # storage-account:
        #   description: "Storage Account Name"
        #   required: true
        # fabric-deployment-hub-url:
        #   description: "Fabric Deployment Hub URL"
        #   required: true
        # workspace-ids:
        #   description: "Comma-separated list of Workspace IDs"
        #   required: true
env:
  STORAGE_ACCOUNT: ${{ vars.CODE_STORAGE_ACCOUNT }}
  FABRIC_DEPLOYMENT_HUB_URL: ${{ vars.FABRIC_DEPLOYMENT_HUB_URL }}
  WORKSPACE_IDS: ${{ vars.WORKSPACE_IDS }}

jobs:
  build:
    runs-on: self-hosted

    steps:
      # Step 1: Check out the repository
      - name: Check out the code
        uses: actions/checkout@v4

      # Step 1.1: Ensure Git is installed
      - name: Check if Git is installed
        run: |
          if command -v git &> /dev/null; then
            echo "Git is installed."
            git --version
          else
            echo "Git is not installed."
            exit 1
          fi
        shell: bash

      # Step 2: Identify modified folders
      # - name: Identify relevant folders
      #   id: relevant_folders
      #   run: |
      #     if git rev-parse HEAD^ &> /dev/null; then
      #       echo "Fetching modified files between HEAD and HEAD^..."
      #       MODIFIED_FILES=$(git diff --name-only HEAD^ HEAD)
      #     else
      #       echo "No previous commit found. Fetching all files in HEAD..."
      #       MODIFIED_FILES=$(git ls-tree --name-only -r HEAD)
      #     fi
      #     echo "Modified files detected:"
      #     echo "$MODIFIED_FILES"
          
      #     # Filter files by extensions and extract folders
      #     RELEVANT_FOLDERS=$(echo "$MODIFIED_FILES" | grep -E '\.(py|platform|ipynb|json)$' | cut -d'/' -f1 | sort | uniq)
      #     echo "Relevant folders detected:"
      #     echo "$RELEVANT_FOLDERS"
      #     echo "folders=$RELEVANT_FOLDERS" >> $GITHUB_ENV
      #   shell: bash

      # Step 3: Authenticate with Azure using Managed Identity
      - name: Authenticate with Azure
        uses: azure/login@v1
        with:
          auth-type: IDENTITY
          client-id: ${{ github.event.inputs.azure-client-id }}
          tenant-id: ${{ github.event.inputs.azure-tenant-id }}
          subscription-id: ${{ github.event.inputs.azure-subscription-id }}
          enable-AzPSSession: true

      # Step 4: Create a blob container with a GUID
      - name: Generate container name
        id: container
        run: |
          GENERATED_CONTAINER=$(uuidgen)
          echo "Generated container name: $GENERATED_CONTAINER"
          echo "container_name=$GENERATED_CONTAINER" >> $GITHUB_ENV
        shell: bash

      # Step 5: Upload repository to shared storage
      - name: Upload repository to shared storage
        run: |
          az storage container create \
            --account-name "${{ env.STORAGE_ACCOUNT }}" \
            --name "$container_name" \
            --auth-mode login
          azcopy copy "$GITHUB_WORKSPACE" "https://${{ env.STORAGE_ACCOUNT }}.blob.core.windows.net/$container_name" --recursive
        env:
          container_name: ${{ env.container_name }}

      # Step 6: Call the deployment API
      - name: Call Deployment API
        run: |
          curl -X POST "https://$FABRIC_DEPLOYMENT_HUB_URL/api/Planner/tenant-deployment-plan" \
            -H "Content-Type: application/json" \
            -d '{
              "workspaceIds": [${{ env.WORKSPACE_IDS }}],
              "repoContainer": "8aff1b19-4d31-4586-8ff7-6b9aee2f5c9f",
              "modifiedFolders": ["Notebook 2.Notebook"]
            }'