name: CI Workflow

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  STORAGE_ACCOUNT: ${{ vars.CODE_STORAGE_ACCOUNT }}
  FABRIC_DEPLOYMENT_HUB_URL: ${{ vars.FABRIC_DEPLOYMENT_HUB_URL }}
  WORKSPACE_IDS: ${{ vars.WORKSPACE_IDS }}

jobs:
  prep:
    name: Preparation Phase
    runs-on: self-hosted
    outputs:
      container_name: ${{ steps.container.outputs.container_name }}
      folders: ${{ steps.changed_folders.outputs.folders }}
    steps:
      # Step 1: Check out the repository
      - name: Check out the code
        uses: actions/checkout@v4

      # Step 2: Identify changed folders
      - name: Identify changed folders
        id: changed_folders
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Running in a pull request context..."
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
            git fetch origin "$BASE_BRANCH"
            CHANGED_FILES=$(git diff --name-only "origin/$BASE_BRANCH" HEAD)
          else
            echo "Not a pull request. Assuming manual run or push event..."
            if git rev-parse HEAD^ &> /dev/null; then
              CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
            else
              CHANGED_FILES=$(git ls-tree --name-only -r HEAD)
            fi
          fi

          echo "Changed files detected:"
          echo "$CHANGED_FILES"

          # Filter files to exclude `.env` and extract folders
          CHANGED_FOLDERS=$(echo "$CHANGED_FILES" | grep -E '\.(py|platform|ipynb|json)$' | grep -v '\.env' | cut -d'/' -f1 | sort | uniq)
          echo "Changed folders detected:"
          echo "$CHANGED_FOLDERS"

          # Save folders as an environment variable
          echo "folders=$(echo "$CHANGED_FOLDERS" | awk -v ORS=',' '{print $0}' | sed 's/,$//')" >> $GITHUB_ENV
        shell: bash

      # Step 3: Authenticate with Azure using Managed Identity
      - name: Authenticate with Azure using Managed Identity
        run: |
          az login --identity 
        shell: bash

      # Step 4: Generate a blob container name
      - name: Generate container name
        id: container
        run: |
          GENERATED_CONTAINER=$(cat /proc/sys/kernel/random/uuid)
          echo "Generated container name: $GENERATED_CONTAINER"
          # Save container name as an environment variable
          echo "container_name=$GENERATED_CONTAINER" >> $GITHUB_ENV
        shell: bash

      # Step 5: Copy changed folders to blob
      - name: Upload changed folders to blob
        run: |
          az storage container create \
            --account-name "${{ env.STORAGE_ACCOUNT }}" \
            --name "${{ steps.container.outputs.container_name }}" \
            --auth-mode login

          # Process folders with proper quoting
          IFS=',' read -r -a FOLDER_ARRAY <<< "${{ steps.changed_folders.outputs.folders }}"
          for folder in "${FOLDER_ARRAY[@]}"; do
            echo "Copying folder: $folder"
            az storage blob upload-batch \
              --account-name "${{ env.STORAGE_ACCOUNT }}" \
              --destination "${{ steps.container.outputs.container_name }}/$folder" \
              --source "$GITHUB_WORKSPACE/$folder" \
              --auth-mode login
          done

  plan:
    name: Plan Phase
    needs: prep
    runs-on: self-hosted
    steps:
      - name: Call Deployment API
        run: |
          curl -X POST "https://${{ env.FABRIC_DEPLOYMENT_HUB_URL }}/api/Planner/tenant-deployment-plan" \
            -H "Content-Type: application/json" \
            -d '{
              "workspaceIds": ['${{ env.WORKSPACE_IDS }}'],
              "repoContainer": "'${{ needs.prep.outputs.container_name }}'",
              "modifiedFolders": ['${{ needs.prep.outputs.folders }}'],
              "savePlan" : true
            }'
  validate:
    needs: plan
    runs-on: self-hosted
    steps:
      - name: Validate Deployment Plan
        run: |
          echo "Validation logic here. Use the plan details from the 'plan' phase if needed."
        shell: bash

  apply:
    needs: validate
    runs-on: self-hosted
    steps:
      - name: Apply Deployment Plan
        run: |
          echo "Apply logic here. Finalize the deployment."
        shell: bash