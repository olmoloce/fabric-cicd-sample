name: CI Workflow

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  STORAGE_ACCOUNT: ${{ vars.CODE_STORAGE_ACCOUNT }}
  FABRIC_DEPLOYMENT_HUB_URL: ${{ vars.FABRIC_DEPLOYMENT_HUB_URL }}
  WORKSPACE_IDS: ${{ vars.WORKSPACE_IDS }}

jobs:
  prep:
    name: Preparation Phase
    runs-on: self-hosted
    outputs:
      container_name: ${{ steps.container.outputs.container_name }}
      folders: ${{ steps.changed_folders.outputs.folders }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Identify changed folders
        id: changed_folders
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Running in a pull request context..."
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
            git fetch origin "$BASE_BRANCH"
            CHANGED_FILES=$(git diff --name-only "origin/$BASE_BRANCH" HEAD)
          else
            echo "Not a pull request. Assuming manual run or push event..."
            if git rev-parse HEAD^ &> /dev/null; then
              CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
            else
              CHANGED_FILES=$(git ls-tree --name-only -r HEAD)
            fi
          fi

          echo "Changed files detected:"
          echo "$CHANGED_FILES"

          CHANGED_FOLDERS=$(echo "$CHANGED_FILES" | grep -E '\.(py|platform|ipynb|json)$' | grep -v '\.env' | cut -d'/' -f1 | sort | uniq)
          echo "Changed folders detected:"
          echo "$CHANGED_FOLDERS"

          echo "folders=$(echo "$CHANGED_FOLDERS" | awk -v ORS=',' '{print $0}' | sed 's/,$//')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Authenticate with Azure using Managed Identity
        run: |
          az login --identity
        shell: bash

      - name: Generate container name
        id: container
        run: |
          GENERATED_CONTAINER=$(cat /proc/sys/kernel/random/uuid)
          echo "Generated container name: $GENERATED_CONTAINER"
          echo "container_name=$GENERATED_CONTAINER" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload changed folders to blob
        run: |
          echo "Container name: ${{ steps.container.outputs.container_name }}"
          echo "Folders: ${{ steps.changed_folders.outputs.folders }}"
          az storage container create \
            --account-name "${{ env.STORAGE_ACCOUNT }}" \
            --name "${{ steps.container.outputs.container_name }}" \
            --auth-mode login

          IFS=',' read -r -a FOLDER_ARRAY <<< "${{ steps.changed_folders.outputs.folders }}"
          for folder in "${FOLDER_ARRAY[@]}"; do
            echo "Copying folder: $folder"
            az storage blob upload-batch \
              --account-name "${{ env.STORAGE_ACCOUNT }}" \
              --destination "${{ steps.container.outputs.container_name }}/$folder" \
              --source "$GITHUB_WORKSPACE/$folder" \
              --auth-mode login
          done

  plan:
    name: Plan Phase
    needs: prep
    runs-on: self-hosted
    outputs:
      plan_file_name: ${{ steps.plan.outputs.plan_file_name }}
      container_name: ${{ steps.plan.outputs.container_name }}
    steps:
      - name: Construct JSON payload and call Deployment API
        id: plan
        env:
          FABRIC_DEPLOYMENT_HUB_URL: ${{ env.FABRIC_DEPLOYMENT_HUB_URL }}
          container_name: ${{ needs.prep.outputs.container_name }}
          folders: ${{ needs.prep.outputs.folders }}
        run: |
          echo "Container name from prep job: $container_name"
          echo "Folders from prep job: $folders"

          JSON_PAYLOAD=$(jq -n \
            --arg repoContainer "$container_name" \
            --argjson modifiedFolders "$(echo "$folders" | tr ',' '\n' | jq -R . | jq -s .)" \
            --arg savePlan "true" \
            '{
                repoContainer: $repoContainer,
                modifiedFolders: $modifiedFolders,
                savePlan: ($savePlan | test("true"))
            }')

          echo "JSON Payload:"
          echo "$JSON_PAYLOAD"

          RESPONSE=$(curl -s -X POST "https://$FABRIC_DEPLOYMENT_HUB_URL/api/Planner/tenant-deployment-plan" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          echo "Planner response: $RESPONSE"

          PLAN_FILE_NAME=$(echo "$RESPONSE" | jq -r '.planFileName')
          CONTAINER=$(echo "$RESPONSE" | jq -r '.container')

          echo "plan_file_name=$PLAN_FILE_NAME" >> $GITHUB_OUTPUT
          echo "container_name=$CONTAINER" >> $GITHUB_OUTPUT
        shell: bash

  validate:
    needs: plan
    runs-on: self-hosted
    outputs:
      validated_plan_file_name: ${{ steps.validate.outputs.validated_plan_file_name }}
      container: ${{ steps.validate.outputs.container }}
    steps:
      - name: Validate Deployment Plan
        id: validate
        env:
          FABRIC_DEPLOYMENT_HUB_URL: ${{ env.FABRIC_DEPLOYMENT_HUB_URL }}
          plan_file_name: ${{ needs.plan.outputs.plan_file_name }}
          container_name: ${{ needs.plan.outputs.container_name }}
        run: |
          JSON_PAYLOAD=$(jq -n \
            --arg planFile "$plan_file_name" \
            --arg repoContainer "$container_name" \
            '{
              PlanFile: $planFile,
              RepoContainer: $repoContainer
            }')

          RESPONSE=$(curl -s -X POST "https://$FABRIC_DEPLOYMENT_HUB_URL/api/Validation/validate-plan" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          echo "Validation response: $RESPONSE"

          VALIDATED_PLAN_FILE_NAME=$(echo "$RESPONSE" | jq -r '.validatedPlanFileName')
          CONTAINER=$(echo "$RESPONSE" | jq -r '.container')

          echo "validated_plan_file_name=$VALIDATED_PLAN_FILE_NAME" >> $GITHUB_OUTPUT
          echo "container=$CONTAINER" >> $GITHUB_OUTPUT
        shell: bash

  apply:
    needs: validate
    runs-on: self-hosted
    steps:
      - name: Apply Deployment Plan
        env:
          FABRIC_DEPLOYMENT_HUB_URL: ${{ env.FABRIC_DEPLOYMENT_HUB_URL }}
          validated_plan_file_name: ${{ needs.validate.outputs.validated_plan_file_name }}
          container_name: ${{ needs.validate.outputs.container }}
        run: |
          JSON_PAYLOAD=$(jq -n \
            --arg planFile "$validated_plan_file_name" \
            --arg repoContainer "$container_name" \
            '{
              PlanFile: $planFile,
              RepoContainer: $repoContainer
            }')

          echo "Apply JSON Payload:"
          echo "$JSON_PAYLOAD"

          RESPONSE=$(curl -s -X POST "https://$FABRIC_DEPLOYMENT_HUB_URL/api/Deployments/deploy-plan" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          echo "Apply response: $RESPONSE"
        shell: bash