name: Identify Changed Files and Folders

on:
  workflow_dispatch: # Manually triggered for testing

jobs:
  identify-changes:
    runs-on: self-hosted

    steps:
      # Step 1: Check out the code
      - name: Check out the code
        uses: actions/checkout@v4

      # Step 2: Identify changed files
      - name: Get changed files
        id: changed_files
        run: |
          if git rev-parse HEAD^ &> /dev/null; then
            echo "Fetching changed files between HEAD and HEAD^..."
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          else
            echo "No previous commit found. Fetching all files in HEAD..."
            CHANGED_FILES=$(git ls-tree --name-only -r HEAD)
          fi

          echo "Changed files detected:"
          echo "$CHANGED_FILES"

          # Convert multiline string to a single line with spaces
          CHANGED_FILES_LIST=$(echo "$CHANGED_FILES" | tr '\n' ' ')
          echo "changed_files=$CHANGED_FILES_LIST" >> $GITHUB_ENV

      # Step 3: Deduce unique folders
      - name: Extract unique folders
        id: unique_folders
        run: |
          FOLDERS=$(echo "$CHANGED_FILES" | grep -E '\.(py|platform|ipynb|json)$' | cut -d'/' -f1 | sort | uniq)

          echo "Unique folders detected:"
          echo "$FOLDERS"

          # Convert multiline string to a single line with spaces
          FOLDERS_LIST=$(echo "$FOLDERS" | tr '\n' ' ')
          echo "folders=$FOLDERS_LIST" >> $GITHUB_ENV

      # Step 4: Display results
      - name: Display results
        run: |
          echo "Changed files: ${{ env.changed_files }}"
          echo "Unique folders: ${{ env.folders }}"